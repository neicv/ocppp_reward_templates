// import * as FileSaver from "file-saver";
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import fs from 'fs';
import XlsxTemplate from 'xlsx-template';
import { rubles, getShortFIO, convertDateDash, convertDateDot } from './src/lib/string-utils.js';
import { DEFAULT_DIRECTOR_FIO as director } from './src/constants/contants.js';

const rf = new rubles;

// const data = await fs.readFile('test.xlsx', { encoding: 'utf8' });
// Загрузить шаблон Актов
const templateData = fs.readFileSync('./resources/act_template.xlsx');

const dataApiConfig = fs.readFileSync('./resources/private/googleApiConfig.json', { encoding: 'utf8' });
const config = JSON.parse(dataApiConfig);

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  // email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  // key: process.env.GOOGLE_PRIVATE_KEY,
  email: config.client_email,
  key: config.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const doc = new GoogleSpreadsheet('1o6XhHE4AJu9H3XeTz0UCTTjfC1V871NrtwC5EIcQw7I', serviceAccountAuth);

await doc.loadInfo(); // loads document properties and worksheets

console.log('Доступ к документу : ', doc.title, ' получен');


const startDate = '2025-04-28';
const endDate = '2025-05-11';

const sheets_titles = ['март 25', 'апрель25', 'май25'];

const persons = [
    {
    name: 'Айметдинова Ольга Викторовна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Баранцева Анна Александровна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Беляева Мария Константиновна',
    is_ip: false,
    sheet: 1
  },
    {
    name: 'Борзенко Наталья Александровна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Буданцов Алексей Викторович',
    is_ip: false,
    sheet: 1
  },
    {
    name: 'Вронская Мария Евгеньевна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Карлов Андрей Станиславович',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Лесников Александр Сергеевич',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Евтушенко Александра Владимировна',
    is_ip: true,
    sheet: 2,
    dogovor: '№21 от 19.03.2024'
  },
  {
    name: 'Лятс Екатерина Георгиевна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Оболонская Татьяна Александровна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Оводова Елена Анатольевна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Овчинникова Надежда Дмитриевна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Петрова Мария Дмитриевна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Решетина Наталия Николаевна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Силуянова Анастасия Алексеевна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Склизкова Полина Юрьевна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Сотникова Дарья Владимировна',
    is_ip: false,
    sheet: 1
  },
  {
    name: 'Ястребова Софья Юрьевна',
    is_ip: false,
    sheet: 1
  },

  // Захарцова Татьяна Александровна
]


// все данные скомпанованны из выбранных Книг (меясяцев)
const sharedSheetData = await getData();
// Отфильтровка по датам
const filteredData = filterDataByTime(startDate, endDate, sharedSheetData);

// console.log('filteredData ', filteredData);

async function generateExcel(options = {}) {
  let copyName = '';
  const { tableData = [], date = {}, person ='', director, sheetNumber = 1, dogovor = '' } = options;
  const summ = tableData.reduce((p, c) => p + +c.cost, 0);
  // TODO Подуать как обойти создание нового
  const template = new XlsxTemplate(templateData);
  if (sheetNumber !== 1) {
    const sheetToCopy = template.sheets.filter((s) => s.id == +sheetNumber);

    template.copySheet(sheetToCopy[0].name, template.sheets[0].name)

    copyName = sheetToCopy[0].name;
    // console.log('template - copy: ', template)
  }
  // const shetsToDelete = template.sheets.filter((s) => s.id != +sheetNumber);
  // shetsToDelete.forEach((sheet) => {
  //   sheet.name && template.deleteSheet(sheet.name);
  //   console.log('delete: ', sheet.name)
  //   if (sheet.id == 1) {
  //     console.log('template: ', template)
  //   }
  // })

  const shetsToDelete = [...template.sheets]
  shetsToDelete.shift();

  if (shetsToDelete.length) {
   for (let i = 0; i < shetsToDelete.length; i++) {
    template.deleteSheet(shetsToDelete[i].name)
   }
  }

  if (copyName !== '') {
    template.sheets[0].name = copyName;
  }

  // const template2 = new XlsxTemplate()
  // console.log('tmp 2 ', template2)
  
  // Set up some placeholder values matching the placeholders in the template
  const values = {
    date,
    data: tableData.map((el, index) => { return {index: index + 1, ...el}}),
    summ,
    person,
    person_short: getShortFIO(person),
    director,
    summ_in_words: rf.number_to_string(summ),
    ...(dogovor !== '' && { dogovor}),
  };

  // template.substitute(sheetNumber, values);
  template.substitute(1, values);

  // Get binary data
  const dataBufer = template.generate({type: 'nodebuffer'});

  fs.writeFileSync(`./out/${getActFileName(date, person)}`, dataBufer, 'utf8', (err) => {
      if (err) {
        console.error('An error occurred:', err);
        return;
      }
      console.log('File has been written successfully');
  });

  // console.log('out ', dataBufer.length, "\n data:\n", dataBufer)
  // console.log('out ', rf)
}

async function getData() {
  const arr = [];

  for (const title of sheets_titles) {
    const sheet = doc.sheetsByTitle[title]; // or use `doc.sheetsById[id]` or `doc.sheetsByIndex[0]`
    console.log(sheet.title);
    console.log(sheet.rowCount);
    const rows = await sheet.getRows(); // can pass in { limit, offset }

    // console.log(rows)))
    // console.log(rows[0]._rawData)

    // TODO Возможно есть смысл переписать через индексы в _rawData и _headerValues: []
    // а нетащить гетом

    rows.forEach((row)=> {
      const date = row.get('Дата движения денег');
      const person = row.get('Специалист') || '';
      const filter1 = row.get('За что') || '';
      const cost = row.get('Сумма вознаграждения специалиста') || '';

      if (filter1.toUpperCase().trim() == 'КЦ') {
        if (cost !== '' && person !== '') {
          if (isNumeric(cost)) {
            arr.push({ date, person, cost })
          }
        }
      }
    })

  }

  return arr;
}

function getActFileName(date = {}, fio = '') {
  if (fio === '') {
    fio = 'без имени';
  }

  return `Акт c ${date?.start || ''} по ${date?.end || ''} ${getShortFIO(fio)}.xlsx`
}

function isNumeric(value) {
  return !isNaN(Number(value));
}

function filterDataByTime(start, end, data = []) {
  const startD = new Date(start);
  const endD = new Date(end);
  let elD;

  data = data.filter((el) => {
    elD = new Date(convertDateDash(el.date))
    return elD >= startD && elD <= endD
  })

  return data;
}

persons.forEach((person) => {
  let t = person.name.split(' ');
  t = t.length ? t[0] : person.name;
  const surname = t.toUpperCase().trim();

  const tableData = filteredData.filter((el) => el.person.toUpperCase().trim() == surname)
  
  if (tableData.length) {
    console.log('В отчёт добавлен(а): ', person.name)
    const options = {
      date: {
        start: convertDateDot(startDate),
        end:   convertDateDot(endDate)
      },
      tableData,
      director,
      person: person.name,
      sheetNumber: person.sheet || 1,
      is_ip: person.is_ip,
      dogovor: person?.dogovor || ''
    }

    generateExcel(options);
  }
})
